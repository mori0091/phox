use std::str::FromStr;
use crate::syntax::ast::{Expr, Lit, Pat};

grammar;

// 最上位: 式
pub Expr: Expr = {
    Expr0,
};

Expr0: Expr = {
    Expr1,
    ExprSeq,
};

ExprSeq: Expr = {
    <es:ExprList> => {
        es.into_iter().reduce(|acc, e| Expr::let_(Pat::Wildcard, acc, e)).unwrap()
    }
};

ExprList: Vec<Expr> = {
    <mut v:(<Expr1> ";")+> <e:Expr1?> => match e {
        None => {
            v.push(Expr::Lit(Lit::Unit));
            v
        }
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Expr1: Expr = {
    ExprAbs,
    ExprLet,
    ExprLetRec,
    ExprIf,
    ExprAdd,
};

// λ抽象や let/if は「一番外側でしか出てこない」ようにする
ExprAbs: Expr = {
    "\\" <id:Ident> "." <body:Expr1> => Expr::abs(id, body),
    "λ" <id:Ident> "." <body:Expr1> => Expr::abs(id, body),
};

ExprLet: Expr = {
    "let" <p:Pat> "=" <e1:Expr1> ";" <e2:Expr1> => Expr::let_(p, e1, e2),
};

ExprLetRec: Expr = {
    "let" "rec" <p:Pat> "=" <e1:Expr1> ";" <e2:Expr1> => Expr::let_rec(p, e1, e2),
};

ExprIf: Expr = {
    "if" <cond:Expr1> "then" <e1:Expr1> "else" <e2:Expr1> => Expr::if_(cond, e1, e2),
};

// 加減算
ExprAdd: Expr = {
    <l:ExprAdd> "+" <r:ExprMul> => Expr::app(Expr::app(Expr::var("+"), l), r),
    <l:ExprAdd> "-" <r:ExprMul> => Expr::app(Expr::app(Expr::var("-"), l), r),
    ExprMul,
};

// 乗除算
ExprMul: Expr = {
    <l:ExprMul> "*" <r:ExprApp> => Expr::app(Expr::app(Expr::var("*"), l), r),
    <l:ExprMul> "/" <r:ExprApp> => Expr::app(Expr::app(Expr::var("/"), l), r),
    ExprApp,
};

// 関数適用（左結合）
ExprApp: Expr = {
    <f:ExprApp> <x:Atom> => Expr::app(f, x),
    Atom,
};

// 原子的な式
Atom: Expr = {
    Lit => Expr::Lit(<>),
    Ident => Expr::var(<>),
    ConIdent => Expr::var(<>),
    ExprParen,
    ExprTuple,
    ExprBlock,
};

ExprParen: Expr = {
    "(" <e:Expr> ")" => e,
};

ExprTuple: Expr = {
    "(" <es:SepByComma<Expr>> ")" => Expr::Tuple(es),
};

ExprBlock: Expr = {
    "{" <e:Expr?> "}" => match e {
        None    => Expr::Lit(Lit::Unit),
        Some(e) => e,
    }
};

// === pattern ===
Pat: Pat = {
    Pat0,
};

Pat0: Pat = {
    PatCon,
    PatAtom,
};

PatCon: Pat = {
    <name:ConIdent> <args:PatAtom*> => Pat::con(name, args),
};

PatAtom: Pat = {
    "_" => Pat::Wildcard,
    Lit => Pat::Lit(<>),
    Ident => Pat::var(<>),
    PatParen,
    PatTuple,
};

PatParen: Pat = {
    "(" <p:Pat> ")" => p,
};

PatTuple: Pat = {
    "(" <ps:SepByComma<Pat>> ")" => Pat::Tuple(ps),
};

// === literal ===
Lit: Lit = {
    LitUnit,
    LitInt,
    LitBool,
};

LitUnit: Lit = {
    "()" => Lit::Unit,
};

LitBool: Lit = {
    "true" => Lit::Bool(true),
    "false" => Lit::Bool(false),
};

LitInt: Lit = {
    r"[0-9]+" => Lit::Int(i64::from_str(<>).unwrap()),
};

// === identifier ===
Ident: String = {
    r"[a-z_][a-zA-Z0-9_]*" => <>.to_string(),
};

ConIdent: String = {
    r"[A-Z][a-zA-Z0-9_]*" => <>.to_string(),
};

// === comma-separated list ===
// A comma-separated list of T elements.
// Except when there is only one element, the trailing comma is optional.
SepByComma<T>: Vec<T> = {
    <mut v:(<T> ",")+> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
